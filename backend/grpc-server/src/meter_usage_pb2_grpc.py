# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import meter_usage_pb2 as meter__usage__pb2


class MeterUsageStub(object):
    """RPC for retrieving meter usage data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadData = channel.unary_stream(
                '/meterusage.MeterUsage/ReadData',
                request_serializer=meter__usage__pb2.ReadRequest.SerializeToString,
                response_deserializer=meter__usage__pb2.MeterData.FromString,
                )


class MeterUsageServicer(object):
    """RPC for retrieving meter usage data
    """

    def ReadData(self, request, context):
        """Since there are numerous meter usage data points collected over time, it's better to stream the results
        rather sending a single enormous response payload.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeterUsageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadData': grpc.unary_stream_rpc_method_handler(
                    servicer.ReadData,
                    request_deserializer=meter__usage__pb2.ReadRequest.FromString,
                    response_serializer=meter__usage__pb2.MeterData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'meterusage.MeterUsage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MeterUsage(object):
    """RPC for retrieving meter usage data
    """

    @staticmethod
    def ReadData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/meterusage.MeterUsage/ReadData',
            meter__usage__pb2.ReadRequest.SerializeToString,
            meter__usage__pb2.MeterData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
